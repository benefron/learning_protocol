# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import contracts_pb2 as contracts__pb2


class RpcServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetAppVersion = channel.unary_unary(
                '/RpcService/GetAppVersion',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.StringReply.FromString,
                )
        self.GetRpcVersion = channel.unary_unary(
                '/RpcService/GetRpcVersion',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.StringReply.FromString,
                )
        self.ScanUSb = channel.unary_unary(
                '/RpcService/ScanUSb',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.GetDeviceConnectionStatus = channel.unary_unary(
                '/RpcService/GetDeviceConnectionStatus',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.EnableAsic = channel.unary_unary(
                '/RpcService/EnableAsic',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.DisableAsic = channel.unary_unary(
                '/RpcService/DisableAsic',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.ResetAsic = channel.unary_unary(
                '/RpcService/ResetAsic',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.WriteChipID = channel.unary_unary(
                '/RpcService/WriteChipID',
                request_serializer=contracts__pb2.ChipID.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.ReadChipID = channel.unary_unary(
                '/RpcService/ReadChipID',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.StringReply.FromString,
                )
        self.LoadADCCalibrationFile = channel.unary_unary(
                '/RpcService/LoadADCCalibrationFile',
                request_serializer=contracts__pb2.File.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.DisableADCCalibration = channel.unary_unary(
                '/RpcService/DisableADCCalibration',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.LoadConfigurationFile = channel.unary_unary(
                '/RpcService/LoadConfigurationFile',
                request_serializer=contracts__pb2.File.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateEmptyConfiguration = channel.unary_unary(
                '/RpcService/CreateEmptyConfiguration',
                request_serializer=contracts__pb2.ConfigurationNew.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.ClearConfiguration = channel.unary_unary(
                '/RpcService/ClearConfiguration',
                request_serializer=contracts__pb2.Id.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.CloseConfiguration = channel.unary_unary(
                '/RpcService/CloseConfiguration',
                request_serializer=contracts__pb2.ConfigurationClose.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetConfigurationActive = channel.unary_unary(
                '/RpcService/SetConfigurationActive',
                request_serializer=contracts__pb2.Id.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.CreateMuxMap = channel.unary_unary(
                '/RpcService/CreateMuxMap',
                request_serializer=contracts__pb2.MuxMapNew.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.SetMuxMapActive = channel.unary_unary(
                '/RpcService/SetMuxMapActive',
                request_serializer=contracts__pb2.Id.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetMuxMap = channel.unary_unary(
                '/RpcService/SetMuxMap',
                request_serializer=contracts__pb2.MuxMap.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetMuxMapWell = channel.unary_unary(
                '/RpcService/SetMuxMapWell',
                request_serializer=contracts__pb2.MuxMapWell.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetMuxMapPixel = channel.unary_unary(
                '/RpcService/SetMuxMapPixel',
                request_serializer=contracts__pb2.MuxMapPixel.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.CreateRefElectrodeMap = channel.unary_unary(
                '/RpcService/CreateRefElectrodeMap',
                request_serializer=contracts__pb2.WellRefSetNew.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.SetRefElectrodeMapActive = channel.unary_unary(
                '/RpcService/SetRefElectrodeMapActive',
                request_serializer=contracts__pb2.Id.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetRefElectrodeMap = channel.unary_unary(
                '/RpcService/SetRefElectrodeMap',
                request_serializer=contracts__pb2.WellRefSet.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetRefElectrodeWell = channel.unary_unary(
                '/RpcService/SetRefElectrodeWell',
                request_serializer=contracts__pb2.WellRef.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.CreateVStimMode = channel.unary_unary(
                '/RpcService/CreateVStimMode',
                request_serializer=contracts__pb2.VStimConfiguration.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateIStimMode = channel.unary_unary(
                '/RpcService/CreateIStimMode',
                request_serializer=contracts__pb2.IStimConfiguration.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateRecMode = channel.unary_unary(
                '/RpcService/CreateRecMode',
                request_serializer=contracts__pb2.RecConfiguration.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateImpSpecMode = channel.unary_unary(
                '/RpcService/CreateImpSpecMode',
                request_serializer=contracts__pb2.ImpSpecConfiguration.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreatePixelConfiguration = channel.unary_unary(
                '/RpcService/CreatePixelConfiguration',
                request_serializer=contracts__pb2.PixelConfigurationNew.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.SetPixelConfigurationActive = channel.unary_unary(
                '/RpcService/SetPixelConfigurationActive',
                request_serializer=contracts__pb2.Id.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetPixelMode = channel.unary_unary(
                '/RpcService/SetPixelMode',
                request_serializer=contracts__pb2.PixelMode.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetPixelModeWell = channel.unary_unary(
                '/RpcService/SetPixelModeWell',
                request_serializer=contracts__pb2.PixelModeWell.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetPixelModeRow = channel.unary_unary(
                '/RpcService/SetPixelModeRow',
                request_serializer=contracts__pb2.PixelModeRow.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetPixelModeColumn = channel.unary_unary(
                '/RpcService/SetPixelModeColumn',
                request_serializer=contracts__pb2.PixelModeColumn.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.SetPixelModeRange = channel.unary_unary(
                '/RpcService/SetPixelModeRange',
                request_serializer=contracts__pb2.PixelModeRange.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.UploadSettings = channel.unary_unary(
                '/RpcService/UploadSettings',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.StartAcquisition = channel.unary_unary(
                '/RpcService/StartAcquisition',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.StartBatchRun = channel.unary_unary(
                '/RpcService/StartBatchRun',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.ExecuteBatchRun = channel.unary_unary(
                '/RpcService/ExecuteBatchRun',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.StopAcquisition = channel.unary_unary(
                '/RpcService/StopAcquisition',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.ExecuteImpedanceSpectroscopy = channel.unary_unary(
                '/RpcService/ExecuteImpedanceSpectroscopy',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.ExportMeasurementData = channel.unary_unary(
                '/RpcService/ExportMeasurementData',
                request_serializer=contracts__pb2.File.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.StartStimulationSequence = channel.unary_unary(
                '/RpcService/StartStimulationSequence',
                request_serializer=contracts__pb2.StimulationSequence.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.StartImpedanceMonitoring = channel.unary_unary(
                '/RpcService/StartImpedanceMonitoring',
                request_serializer=contracts__pb2.ImpedanceMonitoring.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.StopImpedanceMonitoring = channel.unary_unary(
                '/RpcService/StopImpedanceMonitoring',
                request_serializer=contracts__pb2.EmptyMessage.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.CreateBatchProgram = channel.unary_unary(
                '/RpcService/CreateBatchProgram',
                request_serializer=contracts__pb2.BatchProgramNew.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.SetBatchProgramActive = channel.unary_unary(
                '/RpcService/SetBatchProgramActive',
                request_serializer=contracts__pb2.Id.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.CreateBatchSweepCfgMap = channel.unary_unary(
                '/RpcService/CreateBatchSweepCfgMap',
                request_serializer=contracts__pb2.BatchSweepCfgMap.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateBatchSweepMuxMap = channel.unary_unary(
                '/RpcService/CreateBatchSweepMuxMap',
                request_serializer=contracts__pb2.BatchSweepMuxMap.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateBatchSweepRefMap = channel.unary_unary(
                '/RpcService/CreateBatchSweepRefMap',
                request_serializer=contracts__pb2.BatchSweepRefMap.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateBatchSweepVStim = channel.unary_unary(
                '/RpcService/CreateBatchSweepVStim',
                request_serializer=contracts__pb2.BatchSweepVStimSettings.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateBatchSweepIStim = channel.unary_unary(
                '/RpcService/CreateBatchSweepIStim',
                request_serializer=contracts__pb2.BatchSweepIStimSettings.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateBatchSweepRec = channel.unary_unary(
                '/RpcService/CreateBatchSweepRec',
                request_serializer=contracts__pb2.BatchSweepRecSettings.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateBatchRepeat = channel.unary_unary(
                '/RpcService/CreateBatchRepeat',
                request_serializer=contracts__pb2.BatchRepeatSettings.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateTimeLine = channel.unary_unary(
                '/RpcService/CreateTimeLine',
                request_serializer=contracts__pb2.TimeLineSettings.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateTimeLineDelay = channel.unary_unary(
                '/RpcService/CreateTimeLineDelay',
                request_serializer=contracts__pb2.TimeLineDelaySettings.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.CreateTimeLineStimulationEvent = channel.unary_unary(
                '/RpcService/CreateTimeLineStimulationEvent',
                request_serializer=contracts__pb2.TimeLineStimulationEventSettings.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.CreateTimelineRepeat = channel.unary_unary(
                '/RpcService/CreateTimelineRepeat',
                request_serializer=contracts__pb2.TimelineRepeatSettings.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateTimelineImpedanceMonitor = channel.unary_unary(
                '/RpcService/CreateTimelineImpedanceMonitor',
                request_serializer=contracts__pb2.TimelineImpedanceMonitorSettings.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.CreateTimelineSliceDefinition = channel.unary_unary(
                '/RpcService/CreateTimelineSliceDefinition',
                request_serializer=contracts__pb2.TimelineSliceDefinitionSettings.SerializeToString,
                response_deserializer=contracts__pb2.Id.FromString,
                )
        self.SetRecordWaitTimesOnOff = channel.unary_unary(
                '/RpcService/SetRecordWaitTimesOnOff',
                request_serializer=contracts__pb2.RecordWaitTimesOnOffSettings.SerializeToString,
                response_deserializer=contracts__pb2.Status.FromString,
                )
        self.GetErrorInfo = channel.unary_unary(
                '/RpcService/GetErrorInfo',
                request_serializer=contracts__pb2.ErrorInfoRequest.SerializeToString,
                response_deserializer=contracts__pb2.ErrorInfoData.FromString,
                )


class RpcServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetAppVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRpcVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ScanUSb(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDeviceConnectionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EnableAsic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableAsic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetAsic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteChipID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadChipID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadADCCalibrationFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisableADCCalibration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LoadConfigurationFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEmptyConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetConfigurationActive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateMuxMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMuxMapActive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMuxMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMuxMapWell(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMuxMapPixel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRefElectrodeMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRefElectrodeMapActive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRefElectrodeMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRefElectrodeWell(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateVStimMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIStimMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateRecMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateImpSpecMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreatePixelConfiguration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPixelConfigurationActive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPixelMode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPixelModeWell(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPixelModeRow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPixelModeColumn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPixelModeRange(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadSettings(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartAcquisition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartBatchRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteBatchRun(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopAcquisition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteImpedanceSpectroscopy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExportMeasurementData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartStimulationSequence(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartImpedanceMonitoring(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopImpedanceMonitoring(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatchProgram(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetBatchProgramActive(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatchSweepCfgMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatchSweepMuxMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatchSweepRefMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatchSweepVStim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatchSweepIStim(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatchSweepRec(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateBatchRepeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTimeLine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTimeLineDelay(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTimeLineStimulationEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTimelineRepeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTimelineImpedanceMonitor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTimelineSliceDefinition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetRecordWaitTimesOnOff(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetErrorInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetAppVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAppVersion,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.StringReply.SerializeToString,
            ),
            'GetRpcVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRpcVersion,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.StringReply.SerializeToString,
            ),
            'ScanUSb': grpc.unary_unary_rpc_method_handler(
                    servicer.ScanUSb,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'GetDeviceConnectionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDeviceConnectionStatus,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'EnableAsic': grpc.unary_unary_rpc_method_handler(
                    servicer.EnableAsic,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'DisableAsic': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableAsic,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'ResetAsic': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetAsic,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'WriteChipID': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteChipID,
                    request_deserializer=contracts__pb2.ChipID.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'ReadChipID': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadChipID,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.StringReply.SerializeToString,
            ),
            'LoadADCCalibrationFile': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadADCCalibrationFile,
                    request_deserializer=contracts__pb2.File.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'DisableADCCalibration': grpc.unary_unary_rpc_method_handler(
                    servicer.DisableADCCalibration,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'LoadConfigurationFile': grpc.unary_unary_rpc_method_handler(
                    servicer.LoadConfigurationFile,
                    request_deserializer=contracts__pb2.File.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateEmptyConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEmptyConfiguration,
                    request_deserializer=contracts__pb2.ConfigurationNew.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'ClearConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearConfiguration,
                    request_deserializer=contracts__pb2.Id.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'CloseConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseConfiguration,
                    request_deserializer=contracts__pb2.ConfigurationClose.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetConfigurationActive': grpc.unary_unary_rpc_method_handler(
                    servicer.SetConfigurationActive,
                    request_deserializer=contracts__pb2.Id.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'CreateMuxMap': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateMuxMap,
                    request_deserializer=contracts__pb2.MuxMapNew.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'SetMuxMapActive': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMuxMapActive,
                    request_deserializer=contracts__pb2.Id.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetMuxMap': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMuxMap,
                    request_deserializer=contracts__pb2.MuxMap.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetMuxMapWell': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMuxMapWell,
                    request_deserializer=contracts__pb2.MuxMapWell.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetMuxMapPixel': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMuxMapPixel,
                    request_deserializer=contracts__pb2.MuxMapPixel.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'CreateRefElectrodeMap': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRefElectrodeMap,
                    request_deserializer=contracts__pb2.WellRefSetNew.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'SetRefElectrodeMapActive': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRefElectrodeMapActive,
                    request_deserializer=contracts__pb2.Id.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetRefElectrodeMap': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRefElectrodeMap,
                    request_deserializer=contracts__pb2.WellRefSet.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetRefElectrodeWell': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRefElectrodeWell,
                    request_deserializer=contracts__pb2.WellRef.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'CreateVStimMode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVStimMode,
                    request_deserializer=contracts__pb2.VStimConfiguration.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateIStimMode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIStimMode,
                    request_deserializer=contracts__pb2.IStimConfiguration.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateRecMode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRecMode,
                    request_deserializer=contracts__pb2.RecConfiguration.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateImpSpecMode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateImpSpecMode,
                    request_deserializer=contracts__pb2.ImpSpecConfiguration.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreatePixelConfiguration': grpc.unary_unary_rpc_method_handler(
                    servicer.CreatePixelConfiguration,
                    request_deserializer=contracts__pb2.PixelConfigurationNew.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'SetPixelConfigurationActive': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPixelConfigurationActive,
                    request_deserializer=contracts__pb2.Id.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetPixelMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPixelMode,
                    request_deserializer=contracts__pb2.PixelMode.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetPixelModeWell': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPixelModeWell,
                    request_deserializer=contracts__pb2.PixelModeWell.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetPixelModeRow': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPixelModeRow,
                    request_deserializer=contracts__pb2.PixelModeRow.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetPixelModeColumn': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPixelModeColumn,
                    request_deserializer=contracts__pb2.PixelModeColumn.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'SetPixelModeRange': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPixelModeRange,
                    request_deserializer=contracts__pb2.PixelModeRange.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'UploadSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadSettings,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'StartAcquisition': grpc.unary_unary_rpc_method_handler(
                    servicer.StartAcquisition,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'StartBatchRun': grpc.unary_unary_rpc_method_handler(
                    servicer.StartBatchRun,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'ExecuteBatchRun': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteBatchRun,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'StopAcquisition': grpc.unary_unary_rpc_method_handler(
                    servicer.StopAcquisition,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'ExecuteImpedanceSpectroscopy': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteImpedanceSpectroscopy,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'ExportMeasurementData': grpc.unary_unary_rpc_method_handler(
                    servicer.ExportMeasurementData,
                    request_deserializer=contracts__pb2.File.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'StartStimulationSequence': grpc.unary_unary_rpc_method_handler(
                    servicer.StartStimulationSequence,
                    request_deserializer=contracts__pb2.StimulationSequence.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'StartImpedanceMonitoring': grpc.unary_unary_rpc_method_handler(
                    servicer.StartImpedanceMonitoring,
                    request_deserializer=contracts__pb2.ImpedanceMonitoring.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'StopImpedanceMonitoring': grpc.unary_unary_rpc_method_handler(
                    servicer.StopImpedanceMonitoring,
                    request_deserializer=contracts__pb2.EmptyMessage.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'CreateBatchProgram': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatchProgram,
                    request_deserializer=contracts__pb2.BatchProgramNew.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'SetBatchProgramActive': grpc.unary_unary_rpc_method_handler(
                    servicer.SetBatchProgramActive,
                    request_deserializer=contracts__pb2.Id.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'CreateBatchSweepCfgMap': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatchSweepCfgMap,
                    request_deserializer=contracts__pb2.BatchSweepCfgMap.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateBatchSweepMuxMap': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatchSweepMuxMap,
                    request_deserializer=contracts__pb2.BatchSweepMuxMap.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateBatchSweepRefMap': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatchSweepRefMap,
                    request_deserializer=contracts__pb2.BatchSweepRefMap.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateBatchSweepVStim': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatchSweepVStim,
                    request_deserializer=contracts__pb2.BatchSweepVStimSettings.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateBatchSweepIStim': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatchSweepIStim,
                    request_deserializer=contracts__pb2.BatchSweepIStimSettings.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateBatchSweepRec': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatchSweepRec,
                    request_deserializer=contracts__pb2.BatchSweepRecSettings.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateBatchRepeat': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateBatchRepeat,
                    request_deserializer=contracts__pb2.BatchRepeatSettings.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateTimeLine': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTimeLine,
                    request_deserializer=contracts__pb2.TimeLineSettings.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateTimeLineDelay': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTimeLineDelay,
                    request_deserializer=contracts__pb2.TimeLineDelaySettings.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'CreateTimeLineStimulationEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTimeLineStimulationEvent,
                    request_deserializer=contracts__pb2.TimeLineStimulationEventSettings.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'CreateTimelineRepeat': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTimelineRepeat,
                    request_deserializer=contracts__pb2.TimelineRepeatSettings.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateTimelineImpedanceMonitor': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTimelineImpedanceMonitor,
                    request_deserializer=contracts__pb2.TimelineImpedanceMonitorSettings.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'CreateTimelineSliceDefinition': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTimelineSliceDefinition,
                    request_deserializer=contracts__pb2.TimelineSliceDefinitionSettings.FromString,
                    response_serializer=contracts__pb2.Id.SerializeToString,
            ),
            'SetRecordWaitTimesOnOff': grpc.unary_unary_rpc_method_handler(
                    servicer.SetRecordWaitTimesOnOff,
                    request_deserializer=contracts__pb2.RecordWaitTimesOnOffSettings.FromString,
                    response_serializer=contracts__pb2.Status.SerializeToString,
            ),
            'GetErrorInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetErrorInfo,
                    request_deserializer=contracts__pb2.ErrorInfoRequest.FromString,
                    response_serializer=contracts__pb2.ErrorInfoData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RpcService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetAppVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/GetAppVersion',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.StringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRpcVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/GetRpcVersion',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.StringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ScanUSb(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/ScanUSb',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDeviceConnectionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/GetDeviceConnectionStatus',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EnableAsic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/EnableAsic',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableAsic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/DisableAsic',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ResetAsic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/ResetAsic',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteChipID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/WriteChipID',
            contracts__pb2.ChipID.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadChipID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/ReadChipID',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.StringReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadADCCalibrationFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/LoadADCCalibrationFile',
            contracts__pb2.File.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisableADCCalibration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/DisableADCCalibration',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LoadConfigurationFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/LoadConfigurationFile',
            contracts__pb2.File.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateEmptyConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateEmptyConfiguration',
            contracts__pb2.ConfigurationNew.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/ClearConfiguration',
            contracts__pb2.Id.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CloseConfiguration',
            contracts__pb2.ConfigurationClose.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetConfigurationActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetConfigurationActive',
            contracts__pb2.Id.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateMuxMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateMuxMap',
            contracts__pb2.MuxMapNew.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMuxMapActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetMuxMapActive',
            contracts__pb2.Id.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMuxMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetMuxMap',
            contracts__pb2.MuxMap.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMuxMapWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetMuxMapWell',
            contracts__pb2.MuxMapWell.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMuxMapPixel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetMuxMapPixel',
            contracts__pb2.MuxMapPixel.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRefElectrodeMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateRefElectrodeMap',
            contracts__pb2.WellRefSetNew.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRefElectrodeMapActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetRefElectrodeMapActive',
            contracts__pb2.Id.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRefElectrodeMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetRefElectrodeMap',
            contracts__pb2.WellRefSet.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRefElectrodeWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetRefElectrodeWell',
            contracts__pb2.WellRef.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateVStimMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateVStimMode',
            contracts__pb2.VStimConfiguration.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateIStimMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateIStimMode',
            contracts__pb2.IStimConfiguration.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateRecMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateRecMode',
            contracts__pb2.RecConfiguration.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateImpSpecMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateImpSpecMode',
            contracts__pb2.ImpSpecConfiguration.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreatePixelConfiguration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreatePixelConfiguration',
            contracts__pb2.PixelConfigurationNew.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPixelConfigurationActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetPixelConfigurationActive',
            contracts__pb2.Id.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPixelMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetPixelMode',
            contracts__pb2.PixelMode.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPixelModeWell(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetPixelModeWell',
            contracts__pb2.PixelModeWell.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPixelModeRow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetPixelModeRow',
            contracts__pb2.PixelModeRow.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPixelModeColumn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetPixelModeColumn',
            contracts__pb2.PixelModeColumn.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPixelModeRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetPixelModeRange',
            contracts__pb2.PixelModeRange.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/UploadSettings',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartAcquisition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/StartAcquisition',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartBatchRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/StartBatchRun',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteBatchRun(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/ExecuteBatchRun',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopAcquisition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/StopAcquisition',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteImpedanceSpectroscopy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/ExecuteImpedanceSpectroscopy',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExportMeasurementData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/ExportMeasurementData',
            contracts__pb2.File.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartStimulationSequence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/StartStimulationSequence',
            contracts__pb2.StimulationSequence.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartImpedanceMonitoring(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/StartImpedanceMonitoring',
            contracts__pb2.ImpedanceMonitoring.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopImpedanceMonitoring(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/StopImpedanceMonitoring',
            contracts__pb2.EmptyMessage.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatchProgram(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateBatchProgram',
            contracts__pb2.BatchProgramNew.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetBatchProgramActive(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetBatchProgramActive',
            contracts__pb2.Id.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatchSweepCfgMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateBatchSweepCfgMap',
            contracts__pb2.BatchSweepCfgMap.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatchSweepMuxMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateBatchSweepMuxMap',
            contracts__pb2.BatchSweepMuxMap.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatchSweepRefMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateBatchSweepRefMap',
            contracts__pb2.BatchSweepRefMap.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatchSweepVStim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateBatchSweepVStim',
            contracts__pb2.BatchSweepVStimSettings.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatchSweepIStim(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateBatchSweepIStim',
            contracts__pb2.BatchSweepIStimSettings.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatchSweepRec(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateBatchSweepRec',
            contracts__pb2.BatchSweepRecSettings.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateBatchRepeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateBatchRepeat',
            contracts__pb2.BatchRepeatSettings.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTimeLine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateTimeLine',
            contracts__pb2.TimeLineSettings.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTimeLineDelay(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateTimeLineDelay',
            contracts__pb2.TimeLineDelaySettings.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTimeLineStimulationEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateTimeLineStimulationEvent',
            contracts__pb2.TimeLineStimulationEventSettings.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTimelineRepeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateTimelineRepeat',
            contracts__pb2.TimelineRepeatSettings.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTimelineImpedanceMonitor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateTimelineImpedanceMonitor',
            contracts__pb2.TimelineImpedanceMonitorSettings.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTimelineSliceDefinition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/CreateTimelineSliceDefinition',
            contracts__pb2.TimelineSliceDefinitionSettings.SerializeToString,
            contracts__pb2.Id.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetRecordWaitTimesOnOff(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/SetRecordWaitTimesOnOff',
            contracts__pb2.RecordWaitTimesOnOffSettings.SerializeToString,
            contracts__pb2.Status.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetErrorInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RpcService/GetErrorInfo',
            contracts__pb2.ErrorInfoRequest.SerializeToString,
            contracts__pb2.ErrorInfoData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
